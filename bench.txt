   Compiling matvec v0.1.0 (/Users/louis/Documents/zama/matvecmul)
warning: unused imports: `Field`, `One`, and `Zero`
 --> src/arith/field.rs:2:14
  |
2 | use ark_ff::{Field, Fp2, Fp2Config, Fp64, MontBackend, MontConfig, MontFp, One, PrimeField, Zero};
  |              ^^^^^                                                         ^^^              ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `PrimeField`
 --> src/arith/ring.rs:1:21
  |
1 | use ark_ff::{Field, PrimeField};
  |                     ^^^^^^^^^^

warning: unused import: `PoseidonTranscript`
  --> src/protocol/prover/mod.rs:14:22
   |
14 |         transcript::{PoseidonTranscript, ShakeTranscript},
   |                      ^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_std::iterable::Iterable`
 --> src/protocol/transcript/mod.rs:8:5
  |
8 | use ark_std::iterable::Iterable;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sha3::Shake256`
 --> src/protocol/verifier/mod.rs:5:5
  |
5 | use sha3::Shake256;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `PoseidonTranscript` and `self`
  --> src/protocol/verifier/mod.rs:13:22
   |
13 |         transcript::{self, PoseidonTranscript, ShakeTranscript},
   |                      ^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused variable: `m_mle_evals`
  --> src/protocol/verifier/mod.rs:40:14
   |
40 |         let (m_mle_evals, num_vars): (Vec<F::BasePrimeField>, usize) = m_rq.to_mle_evals();
   |              ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_m_mle_evals`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `after_absorb_x`
  --> src/protocol/verifier/mod.rs:70:13
   |
70 |         let after_absorb_x = start.elapsed();
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_absorb_x`

warning: unused variable: `after_absorb_y`
  --> src/protocol/verifier/mod.rs:81:13
   |
81 |         let after_absorb_y = start.elapsed();
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_absorb_y`

warning: unused variable: `after_squeeze`
  --> src/protocol/verifier/mod.rs:90:13
   |
90 |         let after_squeeze = start.elapsed();
   |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_squeeze`

warning: unused variable: `after_compute_z1_mles`
  --> src/protocol/verifier/mod.rs:96:13
   |
96 |         let after_compute_z1_mles = start.elapsed();
   |             ^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_compute_z1_mles`

warning: unused variable: `after_verify_z1`
   --> src/protocol/verifier/mod.rs:107:13
    |
107 |         let after_verify_z1 = start.elapsed();
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_verify_z1`

warning: unused variable: `after_eq_eval`
   --> src/protocol/verifier/mod.rs:112:13
    |
112 |         let after_eq_eval = start.elapsed();
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_eq_eval`

warning: unused variable: `after_x_alpha_eval`
   --> src/protocol/verifier/mod.rs:122:13
    |
122 |         let after_x_alpha_eval = start.elapsed();
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_x_alpha_eval`

warning: unused variable: `after_ell_eval`
   --> src/protocol/verifier/mod.rs:130:13
    |
130 |         let after_ell_eval = start.elapsed();
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_ell_eval`

warning: unused variable: `after_m_eval`
   --> src/protocol/verifier/mod.rs:140:13
    |
140 |         let after_m_eval = start.elapsed();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_m_eval`

warning: unused variable: `after_verify_z3`
   --> src/protocol/verifier/mod.rs:157:13
    |
157 |         let after_verify_z3 = start.elapsed();
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_verify_z3`

warning: unused variable: `after_ell_eval_z3`
   --> src/protocol/verifier/mod.rs:165:13
    |
165 |         let after_ell_eval_z3 = start.elapsed();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_ell_eval_z3`

warning: unused variable: `after_whir_setup`
   --> src/protocol/verifier/mod.rs:172:13
    |
172 |         let after_whir_setup = start.elapsed();
    |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_whir_setup`

warning: unused variable: `after_whir_verify`
   --> src/protocol/verifier/mod.rs:177:13
    |
177 |         let after_whir_verify = start.elapsed();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_whir_verify`

warning: unused variable: `after_eq_eval_z3`
   --> src/protocol/verifier/mod.rs:184:13
    |
184 |         let after_eq_eval_z3 = start.elapsed();
    |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_eq_eval_z3`

warning: unused variable: `after_build_eq`
   --> src/protocol/verifier/mod.rs:204:13
    |
204 |         let after_build_eq = start.elapsed();
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_build_eq`

warning: unused variable: `after_y_alpha`
   --> src/protocol/verifier/mod.rs:221:13
    |
221 |         let after_y_alpha = start.elapsed();
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_y_alpha`

warning: unused variable: `after_z2`
   --> src/protocol/verifier/mod.rs:232:13
    |
232 |         let after_z2 = start.elapsed();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_z2`

warning: constant `lg_p` should have an upper case name
 --> src/rlwe/mod.rs:9:7
  |
9 | const lg_p: usize = 4;
  |       ^^^^
  |
  = note: `#[warn(non_upper_case_globals)]` on by default
help: convert the identifier to upper case
  |
9 - const lg_p: usize = 4;
9 + const LG_P: usize = 4;
  |

warning: `matvec` (lib) generated 25 warnings (run `cargo fix --lib -p matvec` to apply 7 suggestions)
    Finished `bench` profile [optimized] target(s) in 3.62s
     Running benches/functionality_bench.rs (target/release/deps/functionality_bench-8ede06cb938b1a69)
Benchmarking matrix_creation
Benchmarking matrix_creation: Warming up for 3.0000 s
Benchmarking matrix_creation: Collecting 10 samples in estimated 5.0247 s (2365 iterations)
Benchmarking matrix_creation: Analyzing
matrix_creation         time:   [2.1193 ms 2.1207 ms 2.1227 ms]
                        change: [−97.855% −97.833% −97.816%] (p = 0.00 < 0.05)
                        Performance has improved.

Benchmarking plaintext_matvec
Benchmarking plaintext_matvec: Warming up for 3.0000 s
Benchmarking plaintext_matvec: Collecting 10 samples in estimated 5.0074 s (1815 iterations)
Benchmarking plaintext_matvec: Analyzing
plaintext_matvec        time:   [2.7346 ms 2.7445 ms 2.7522 ms]
                        change: [−96.972% −96.953% −96.935%] (p = 0.00 < 0.05)
                        Performance has improved.

Benchmarking vector_encryption
Benchmarking vector_encryption: Warming up for 3.0000 s
Benchmarking vector_encryption: Collecting 10 samples in estimated 5.4739 s (165 iterations)
Benchmarking vector_encryption: Analyzing
vector_encryption       time:   [33.210 ms 33.252 ms 33.305 ms]
                        change: [−96.939% −96.918% −96.903%] (p = 0.00 < 0.05)
                        Performance has improved.

Benchmarking prover_computation
Benchmarking prover_computation: Warming up for 3.0000 s

Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 66.9s.
Benchmarking prover_computation: Collecting 10 samples in estimated 66.935 s (10 iterations)
Benchmarking prover_computation: Analyzing
prover_computation      time:   [6.6642 s 6.6783 s 6.6916 s]
                        change: [−97.097% −97.079% −97.062%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 4 outliers among 10 measurements (40.00%)
  1 (10.00%) low severe
  1 (10.00%) low mild
  1 (10.00%) high mild
  1 (10.00%) high severe

Benchmarking result_decryption
Benchmarking result_decryption: Warming up for 3.0000 s
Benchmarking result_decryption: Collecting 10 samples in estimated 5.0036 s (37k iterations)
Benchmarking result_decryption: Analyzing
result_decryption       time:   [134.88 µs 134.98 µs 135.07 µs]
                        change: [−2.6498% −2.3624% −2.1286%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 2 outliers among 10 measurements (20.00%)
  2 (20.00%) low mild

Benchmarking verifier_computation
Benchmarking verifier_computation: Warming up for 3.0000 s
Benchmarking verifier_computation: Collecting 10 samples in estimated 6.9846 s (110 iterations)
Benchmarking verifier_computation: Analyzing
verifier_computation    time:   [63.197 ms 63.678 ms 64.737 ms]
                        change: [−96.734% −96.683% −96.616%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe

Benchmarking whir_prover
Benchmarking whir_prover: Warming up for 3.0000 s
Benchmarking whir_prover: Collecting 10 samples in estimated 5.0433 s (2585 iterations)
Benchmarking whir_prover: Analyzing
whir_prover             time:   [1.9643 ms 1.9683 ms 1.9739 ms]
                        change: [−0.7387% −0.2563% +0.2156%] (p = 0.32 > 0.05)
                        No change in performance detected.

Benchmarking transcript_absorb
Benchmarking transcript_absorb: Warming up for 3.0000 s
Benchmarking transcript_absorb: Collecting 10 samples in estimated 5.1077 s (1375 iterations)
Benchmarking transcript_absorb: Analyzing
transcript_absorb       time:   [3.6964 ms 3.7260 ms 3.7481 ms]
                        change: [−0.7671% +0.2715% +1.1684%] (p = 0.61 > 0.05)
                        No change in performance detected.

Benchmarking shake256_absorb
Benchmarking shake256_absorb: Warming up for 3.0000 s
Benchmarking shake256_absorb: Collecting 10 samples in estimated 5.0025 s (89k iterations)
Benchmarking shake256_absorb: Analyzing
shake256_absorb         time:   [56.422 µs 56.462 µs 56.509 µs]
                        change: [−0.2527% −0.0930% +0.0970%] (p = 0.36 > 0.05)
                        No change in performance detected.
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe

Benchmarking shake256_absorb_squeeze
Benchmarking shake256_absorb_squeeze: Warming up for 3.0000 s
Benchmarking shake256_absorb_squeeze: Collecting 10 samples in estimated 5.0022 s (77k iterations)
Benchmarking shake256_absorb_squeeze: Analyzing
shake256_absorb_squeeze time:   [65.007 µs 65.113 µs 65.211 µs]
                        change: [−3.1068% −1.1622% +0.0306%] (p = 0.24 > 0.05)
                        No change in performance detected.

Benchmarking shake_transcript_absorb
Benchmarking shake_transcript_absorb: Warming up for 3.0000 s
Benchmarking shake_transcript_absorb: Collecting 10 samples in estimated 5.0006 s (94k iterations)
Benchmarking shake_transcript_absorb: Analyzing
shake_transcript_absorb time:   [53.057 µs 53.257 µs 53.418 µs]
                        change: [−0.8942% −0.3598% +0.1318%] (p = 0.21 > 0.05)
                        No change in performance detected.

Benchmarking shake_transcript_absorb_squeeze
Benchmarking shake_transcript_absorb_squeeze: Warming up for 3.0000 s
Benchmarking shake_transcript_absorb_squeeze: Collecting 10 samples in estimated 5.0046 s (40k iterations)
Benchmarking shake_transcript_absorb_squeeze: Analyzing
shake_transcript_absorb_squeeze
                        time:   [124.31 µs 125.43 µs 127.27 µs]
                        change: [−1.5746% −0.1355% +1.2285%] (p = 0.86 > 0.05)
                        No change in performance detected.

